


1.首先static初始化块是在构造函数之前执行的，而且只执行一次，即类首次加载时。

大家可以这样想象，初始化是在类加载时候完成的，二构造方法是生成对象的，生成对象肯定是在类加载之后完成的

所以简明扼要，只有先加载后生成对象嘛，所以肯定是先执行初始化块。

2.初始化块是分为静态和非静态，静态初始化块是只执行一次，无论你new多少次，它只执行一次。

非静态初始化块则不是那样，每次new  都会执行，至于执行顺序毋庸置疑，肯定是先静态后非静态，

不过无论静态还是非静态它们的执行顺序都在构造方法前执行。

重要一点就是在存在父类情况下：在执行完非静态块后立即执行其构造函数然后执行子类的非静态代码块然后执行子类的构造方法








例子如下


public class demo1 extends B {
    public demo1() {
        System.out.println("子类A构造方法");
    }
    static {
        System.out.println("子类A静态初始化块");
    }
    {
        System.out.println("子类A初始化块");
    }
    public static void main(String[] args) {
        System.out.println("---new对象之前为类加载-----");
        new demo1();
        System.out.println("---第二次new新对象时-----");
        new demo1();
    }
}

class B {
    public B() {
        System.out.println("父类B构造方法");
    }

    static {
        System.out.println("父类B静态初始化块");
    }

    {
        System.out.println("父类B初始化块");
    }
}

父类B静态初始化块
子类A静态初始化块
---new对象之前为类加载-----
父类B初始化块
父类B构造方法
子类A初始化块
子类A构造方法
---第二次new新对象时-----
父类B初始化块
父类B构造方法
子类A初始化块
子类A构造方法