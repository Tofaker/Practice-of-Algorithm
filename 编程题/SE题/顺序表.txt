




public class MyArrayList {

    public int[] elem;//数组 elem
    public int usedSize;//有效长度

    public int tmp ;临时变量

    public MyArrayList() {	初始化
        this.elem = new int[10];
        this.usedSize = 0;
    }


// 在 pos 位置新增元素
    public void add(int pos, int data) {
        if(pos < 0 || pos > this.usedSize) {
            System.out.println("pos位置不合法");
            return;
        }
        if(this.usedSize == this.elem.length) {
            System.out.println("顺序表为满！");
            return;
        }
        for (int i = this.usedSize-1;i >= pos;i--) {
            this.elem[i+1] = this.elem[i];
        }
        this.elem[pos] = data;
        this.usedSize++;//注意
    }

// 打印顺序表
    public void display()//遍历打印
// 判定是否包含某个元素
    public boolean contains(int toFind)//遍历查找
// 查找某个元素对应的位置
    public int search(int toFind) //遍历查找返回index
// 获取 pos 位置的元素
    public int getPos(int pos)//判断位置是否合法
    	return this.elem[pos];
// 给 pos 位置的元素设为 value
    public void setPos(int pos, int value)
//删除第一次出现的关键字key
    public void remove(int toRemove)
// 获取顺序表长度
    public int size()//return this.usedSize;  返回实际长度
// 清空顺序表
    public void clear()//this.usedSize = 0   实际长度为0


//删除第一次出现的关键字key
		寻找key  index
		后面的向前移动
			for (int i = index; i < this.usedSize-1; i++)
				this.elem[i] = this.elem[i+1]


    public void remove(int toRemove) {
        //1、找到toRemove 的位置  -1
        int index = search(toRemove);
        if(index == -1) {
            System.out.println("没有这个数字");
            return;
        }
        //2、删除
        //int i = index;
        for (int i = index; i < this.usedSize-1; i++) {
            this.elem[i] = this.elem[i+1];
        }
        this.usedSize--;
    }