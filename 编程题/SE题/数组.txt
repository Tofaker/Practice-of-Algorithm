
数组反转


public static void reverse(int[] array) {
        int left = 0;
        int right = array.length-1;
        while (left < right) {
            int tmp = array[left];
            array[left] = array[right];
            array[right] = tmp;
            left++;
            right--;
        }
    }


数组奇数放前偶数放后
    public static void func(int[] array) {
        int left = 0;
        int right = array.length-1;
        while (left < right) {
            while (left < right && array[left] % 2 == 0) {
                left++;
            }
            //left遇到奇数了
            while (left < right && array[right] % 2 != 0) {
                right--;
            }
            //right 遇到偶数了
            if(left < right) {
                int tmp = array[left];
                array[left] = array[right];
                array[right] = tmp;
            }

        }
    }

    转为字符串类型
    public static void main8(String[] args) {
        int[] array = {12,13,15,23,1,41,6,18};
        func(array);
        System.out.println(Arrays.toString(array));
    }


    求数组最大值  
    	遍历比较
    	public static int maxArray(int[] array) {
	        if(array == null || array.length == 0) {
	            return -1;
	        }

	        int max = array[0];
	        for (int i = 1; i < array.length; i++) {
	            if(array[i] > max) {
	                max = array[i];
	            }
	        }
	        return max;
    	}

    求数组平均值
    	遍历求，求平均  ret = sum*1.0/array.length;   必须有sum*1.0 转化为浮点数

    public static double avg(int[] array) {
        double ret = 0.0;
        int sum = 0;
        for (int x: array) {
            sum += x;
        }
        ret = sum*1.0/array.length;
        return ret;
    }

    有序数组二分法查找

    	左中右   比较后变换左/右为中的位置


    public static int binarySearch(int[] array,int key) {
        int left = 0;
        int right = array.length-1;
        while (left <= right) {
            count++;
            int mid = (left+right)/2;
            if(array[mid] < key) {
                left = mid+1;
            }else if(array[mid]  > key) {
                right = mid-1;
            }else {
                return mid;
            }
        }
        return -1;//没有找到
    }


    有序性

    public static boolean isSorted(int[] array) {
        for (int i = 0; i < array.length-1; i++) {
            if(array[i] > array[i+1]) {
                return false;
            }
        }
        return true;
    }


    拷贝数组
    
    public static int[] copyArray(int[] array) {
        int[] copy = new int[array.length];
        for (int i = 0; i < array.length; i++) {
            copy[i] = array[i];
        }
        return copy;
    }