





翻转		
	核心代码
 		while (cur != null) {
 			Node curNext = cur.next;
 			cur.next = prev;//cur下一个给前驱（翻转）
            prev = cur;//prev移至cur
            cur = curNext;//cur指向下一个
        }

寻找链表中心：一个走一步，一个走两步，快的走完慢的在中间
		核心代码
			fast = fast.next.next;
            slow = slow.next;

寻找倒数第k个节点：快的先走k步，然后快慢一起走，快的为null，则  为慢的节点
		核心代码
			while (k-1 > 0)
				if(fast.next !=null) {
		                fast = fast.next;
		                k--;
	        fast = fast.next;
            slow = slow.next;

回文：	1、找到中心位置（）
		2、进行反转（后半部分）
		3、开始判断
			头部向后遍历、尾部向前遍历 ，两者相互比较

有环：	fast和slow一直走，若能相遇，有环
		核心代码：	while (fast != null && fast.next != null)
						fast = fast.next.next;
			            slow = slow.next;
			            if(fast == slow) {
			                break;
			            }

寻找环入口：  	fast和slow一直走，第一次相遇后，
				slow转为头结点一步一步走，fast不变且开始一步一步走，   slow = this.head;
				再次相遇为环入口节点，



排好序的链表删重：遍历并删重复值
				核心代码：删重复值
		            if(cur.next != null && cur.data == cur.next.data) {
		                while (cur.next != null && cur.data == cur.next.data) {
		                    cur = cur.next;
		                }
		                cur = cur.next;//（重复的删一个保留一个）
		            }



链表内所有小于k的节点放在前，大于k的放在后，不改变原有数据顺序，
			：给新节点  bs  be      as  ae  
			遍历原链表，小的给尾插b，大的尾插a，
			拼接两个链表，返回新表头
					核心代码：
						while (cur != null) 
				            if(cur.data < x) {
				                尾插b
				            }else {
				                尾插a
				            }
				            cur = cur.next;
				        






