


泛型：//通用类型
class MyArrayList<T>  <T> ：只是一个占位符，表示当前类时的泛型类
意义：
1.可以自动的进行类型转换
2.进行类型检查
坑：
1.不能够new 泛型类型的数组 new T<10>  error
2.MyArrayList<int> myArrayList3 = new MyArrayList<>();
    简单类型不能作为泛型类型的参数<包装类/类 可以>
3.泛型类型的参数 ，不参与类型的组成，
面试问题：泛型是怎么编译的？
        擦除机制：被擦除为Object 了，一定记住，不是替换为Object，
            泛型是在编译时期的一个动作，它只存在于编译时期，

* */
class MyArrayList<T> {
    public T[] elem;
    public int usedsize;

    public MyArrayList() {
        this.elem = (T[]) new Object[10];
    }

    public void add(T data) {
        this.elem[this.usedsize++] = data;
    }

    public T getPos(int pos) {
        return this.elem[pos];
    }
}
class Person{

}

public class TestDemo {
    public static void main(String[] args) {
        MyArrayList myArrayList = new MyArrayList();
        myArrayList.add(1);
        myArrayList.add(1.9);
        myArrayList.add("hello");
        String str = (String) myArrayList.getPos(2);
        System.out.println(str);
        MyArrayList<String> myArrayList1 = new MyArrayList<>();
        myArrayList1.add("hello");
        myArrayList1.add("lisan");
        myArrayList1.add("wangwu");
        System.out.println(myArrayList1.getPos(1));
        //System.out.println(myArrayList1.toString());
        MyArrayList<Integer> myArrayList2 = new MyArrayList<>();
        myArrayList2.add(1);
    }
    public static void main11(String[] args) {
        Person person = new Person();
        System.out.println(person);
        MyArrayList<String> myArrayList = new MyArrayList<>();
        MyArrayList<Integer> myArrayList1 = new MyArrayList<>();
        System.out.println(myArrayList);
        System.out.println(myArrayList1);
    }