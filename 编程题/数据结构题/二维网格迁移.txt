给你一个 m 行 n 列的二维网格 grid 和一个整数 k。你需要将 grid 迁移 k 次。

每次「迁移」操作将会引发下述活动：

位于 grid[i][j] 的元素将会移动到 grid[i][j + 1]。
位于 grid[i][n - 1] 的元素将会移动到 grid[i + 1][0]。
位于 grid[m - 1][n - 1] 的元素将会移动到 grid[0][0]。
请你返回 k 次迁移操作后最终得到的 二维网格

链接：https://leetcode-cn.com/problems/shift-2d-grid


思路
实际上每次移动就是对打平为一维数组的原二维数组的最后一位数移动到最前, 移动了 m*n 次以后与没有移动等效, 因此 k 需要对 m*n 取余, 最后返回二维数组的格式   		也可以用队列存储一维数组后弹出 抄了网上的思路和代码，加进去了队列的使用，虽然多此一举






public List<List<Integer>> shiftGrid(int[][] grid, int k) {

        int[] nums = new int[grid.length * grid[0].length];
        for (int i = 0, iMax = grid.length; i < iMax ; i++) {
            for (int j = 0, jMax = grid[0].length; j <jMax ; j++) {
                k %=nums.length;   //   k赋值 超过 二维数组总长度后 会转向 二维数组第一个
                nums[k++] = grid[i][j];  //赋值一次k+一次  k从第  k个位置开始赋值，
            }
        }
        k = 0;
        List<List<Integer>> lists = new ArrayList<>();
        for (int i = 0,iMax = grid.length; i < iMax; i++) {
            List<Integer> tmplist = new ArrayList<>(grid[0].length);//创建原二维数组的列长度
            for (int j = 0,jMax = grid[0].length; j < jMax; j++) {
                tmplist.add(nums[k++]);//把nums数组的值分别给tmplist
            }
            lists.add(tmplist);//列加载到行
        }
        return lists;
    }