比较两个版本号 version1 和 version2。
如果 version1 > version2 返回 1，如果 version1 < version2 返回 -1， 除此之外返回 0。

你可以假设版本字符串非空，并且只包含数字和 . 字符。

 . 字符不代表小数点，而是用于分隔数字序列。

例如，2.5 不是“两个半”，也不是“差一半到三”，而是第二版中的第五个小版本。

你可以假设版本号的每一级的默认修订版号为 0。例如，版本号 3.4 的第一级（大版本）和第二级（小版本）修订号分别为 3 和 4。其第三级和第四级修订号均为 0


链接：https://leetcode-cn.com/problems/compare-version-numbers



思路：
	遍历字符串  

		使用a进行计和   遇到.时 跳过 符号遇到 0 时 也不计入 a的运算内

		最后比较a和b大小




class solution{
    public int compareVersion(String version1,String version2){
        int i = 0; int j = 0;

        while (i < version1.length() || j < version2.length()){
            int a = 0; int b = 0;
            while (i < version1.length() && version1.charAt(i) != '.'){
                a = a*10+version1.charAt(i++)-'0';
            }
            while (j < version2.length() && version2.charAt(j) != '.'){
                b = b*10+version2.charAt(j++)-'0';
            }
            if (a > b) return 1;
            else if (a < b) return -1;
            i++;j++;
        }
        return 0;
    }
        
}