给定两个非空二叉树 s 和 t，检验 s 中是否包含和 t 具有相同结构和节点值的子树。s 的一个子树包括 s 的一个节点和这个节点的所有子孙。s 也可以看做它自身的一棵子树。



核心 ：递归调用左子和右子
		左子有或右子有 则返回true；

		if (isSameTree(s,t)) return true;

        return  (isSubtree(s.left,t) || isSubtree(s.right,t));


 public boolean isSubtree(Node s, Node t) {
        if (s == null || t == null){
            return false;
        }
        if (isSameTree(s,t)) return true;
        return  (isSubtree(s.left,t) || isSubtree(s.right,t));
    }


    	大佬写法：
    	return isSameTree(s,t) || (s != null && (isSubtree(s.left,t) || isSubtree(s.right, t) ) );



    	//造的函数
    	boolean isSameTree(Node root1, Node root2){
        if (root1 == null ^ root2 == null) return false;
        if (root1 == null && root2 == null) return true;
        if (root1.val != root2.val) return false;
        return isSameTree(root1.left,root2.left) && isSameTree(root1.right,root2.right);
    