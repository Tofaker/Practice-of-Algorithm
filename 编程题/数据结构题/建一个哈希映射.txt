不使用任何内建的哈希表库设计一个哈希映射
put(key, value)：向哈希映射中插入(键,值)的数值对。如果键对应的值已经存在，更新这个值。
get(key)：返回给定的键所对应的值，如果映射中不包含这个键，返回-1。
remove(key)：如果映射中存在这个键，删除这个数值对。

链接：https://leetcode-cn.com/problems/design-hashmap


重点 哈希初始化：
	Node[] myHashMap = new Node[2069];//选择2069;

    public MyHashMap() {

        for (int i = 0; i < myHashMap.length; i++) {
            myHashMap[i] = new Node(0,0);
        }
    }







class MyHashMap {
    class Node{
        private int key;
        private int value;
        public Node next;

        public Node(int key, int value) {
            this.key = key;
            this.value = value;
            this.next = null;
        }
    }

    Node[] myHashMap = new Node[2069];

    public MyHashMap() {

        for (int i = 0; i < myHashMap.length; i++) {
            myHashMap[i] = new Node(0,0);
        }
    }

    public void put(int key, int value) {
        int hashCode = getHashCode(key);
        Node p = myHashMap[hashCode].next;
        while (p != null){
            if (p.key == key){
                p.value = value;
                return;
            }
            p = p.next;
        }
        Node tmp = new Node(key,value);
        tmp.next = myHashMap[hashCode].next;
        myHashMap[hashCode].next = tmp;
    }

    private int getHashCode(int key) {
        return key % 2069;
    }

    /** Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key */
    public int get(int key) {
        int hashCode = getHashCode(key);
        Node p = myHashMap[hashCode].next;
        while (p != null){
            if (p.key == key){
                return p.value;
            }
            p = p.next;
        }
        return -1;
    }

    /** Removes the mapping of the specified value key if this map contains a mapping for the key */
    public void remove(int key) {
        int hashCode = getHashCode(key);
        Node p = myHashMap[hashCode].next;
        Node pre = myHashMap[hashCode];
        while (p != null){
            if (p.key == key){
                pre.next = p.next;
                return;
            }
            pre = p;
            p = p.next;
        }
    }
}
