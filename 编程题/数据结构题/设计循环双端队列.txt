设计实现双端队列。
你的实现需要支持以下操作：

MyCircularDeque(k)：构造函数,双端队列的大小为k。
insertFront()：将一个元素添加到双端队列头部。 如果操作成功返回 true。
insertLast()：将一个元素添加到双端队列尾部。如果操作成功返回 true。
deleteFront()：从双端队列头部删除一个元素。 如果操作成功返回 true。
deleteLast()：从双端队列尾部删除一个元素。如果操作成功返回 true。
getFront()：从双端队列头部获得一个元素。如果双端队列为空，返回 -1。
getRear()：获得双端队列的最后一个元素。 如果双端队列为空，返回 -1。
isEmpty()：检查双端队列是否为空。
isFull()：检查双端队列是否满了。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/design-circular-deque




	核心：
	
		以双向链表 作为设计基础







class Node{
    int val;
    Node next;
    Node prev;

    public Node(int val) {
        this.val = val;
    }
}

class MyCircularDeque {
    Node head = new Node(-1);
    Node tail = new Node(-1);
    int size;
    int count = 0;
    /** Initialize your data structure here. Set the size of the deque to be k. */
    public MyCircularDeque(int k) {
        head.next = tail;
        tail.prev = head;
        this.size = k;
    }

    /** Adds an item at the front of Deque. Return true if the operation is successful. */
    public boolean insertFront(int value) {
        if (this.isFull()){
            return false;
        }else {
            Node node = new Node(value);
            Node tmp = head.next;
            node.next = tmp;
            tmp.prev = node;
            head.next = node;
            node.prev = head;
            if (count <= size){
                count++;
            }
            return true;
        }

    }

    /** Adds an item at the rear of Deque. Return true if the operation is successful. */
    public boolean insertLast(int value) {
        if (this.isFull()){
            return false;
        }else {
            Node node = new Node(value);
            Node tmp = tail.prev;
            tmp.next = node;
            node.next = tail;
            node.prev = tmp;
            tail.prev = node;
            if (count <= size){
                count++;
            }
            return true;
        }
    }

    /** Deletes an item from the front of Deque. Return true if the operation is successful. */
    public boolean deleteFront() {
        if (this.isEmpty()) return false;
        else {
            Node tmp = head.next.next;
            head.next = tmp;
            tmp.prev = head;
            if (count > 0){
                count--;
            }
            return true;
        }
    }

    /** Deletes an item from the rear of Deque. Return true if the operation is successful. */
    public boolean deleteLast() {
        if (this.isEmpty())return false;
        else {
            Node tmp = tail.prev.prev;
            tmp.next = tail;
            tail.prev = tmp;
            if (count > 0){
                count--;
            }
            return true;
        }
    }

    /** Get the front item from the deque. */
    public int getFront() {
        if (this.isEmpty())return -1;
        else return head.next.val;
    }

    /** Get the last item from the deque. */
    public int getRear() {
        if (this.isEmpty())return -1;
        else return tail.prev.val;
    }

    /** Checks whether the circular deque is empty or not. */
    public boolean isEmpty() {
        return count == 0;
    }

    /** Checks whether the circular deque is full or not. */
    public boolean isFull() {
        return count == size;
    }
}