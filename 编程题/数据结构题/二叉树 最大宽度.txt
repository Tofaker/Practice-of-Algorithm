给定一个二叉树，编写一个函数来获取这个树的最大宽度。树的宽度是所有层中的最大宽度。这个二叉树与满二叉树（full binary tree）结构相同，但一些节点为空。


链接：https://leetcode-cn.com/problems/maximum-width-of-binary-tree






核心：
	//层序遍历，记录每个节点的索引，
    当每层遍历完成后计算下一层的最大宽度(链表最后一个元素索引-链表的最前面元素索引+1)







    private int maxW = 1;
    public int widthOfBinaryTree(Node root){
        if (root == null)return 0;
        Queue<Node> queue = new LinkedList<>(); //队列

        LinkedList<Integer> indexList = new LinkedList<>(); //链表用来存放每一层的数据
        queue.add(root);
        indexList.add(1);
        int size = 1;
        //进入循环
        while (!queue.isEmpty()){
            Node node = queue.poll();// 队列 每层遍历 while (!queue.isEmpty())
            size--;
            int index = indexList.removeFirst();
            if (node.left != null){
                queue.add(node.left);
                indexList.add(2*index);//存入此层的最左边的  层序的顺序索引值
            }
            if (node.right != null){
                queue.add(node.right);
                indexList.add(2*index+1);// 存入此层的最右边的  层序的顺序索引值
            }
            if (size == 0){
                if (indexList.size() >= 2){
                    maxW = Math.max(maxW,indexList.getLast()-indexList.getFirst()+1);
                    //每层最后一个元素的层序索引值-每层第一个元素的层序索引值+1=此层的个数
                }
                size = queue.size(); 
                //size 设置为queue 的长度   一层计算下一层的索引值时  
                // 需要把所有的queue的值遍历完  即queue.size()==0   
                // 遍历完出现的indexList.getLast()、indexList.getFirst()
                // 分别是下一层最后一个元素的层序索引值 和下一层第一个元素的层序索引值
            }
        }
        return maxW;
    }